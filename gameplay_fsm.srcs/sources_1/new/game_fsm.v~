`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 11/16/2017 09:53:13 AM
// Design Name: 
// Module Name: game_fsm
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module game_fsm(
    input clk, SW, reset,start,
    input [3:0] controls,
    input [10:0] hcount,
    input [9:0] vcount,
    input vsync,
    input opponent_lost, 
    input opponent_won,
    output reg [1:0] lives,
    output player_won, 
    output player_lost,
    output [11:0] total_pixel,
    output [3:0] state_display,
    output reg [3:0] special_state,
    input [3:0] special_state_enmey,
    output reg special_start_timer,
    output special_timer_done,
    output reg greenghost_dead
    );
    
    reg vsync_prev;
    wire rset_positions;
    wire hold_position;
    localparam [7:0] CELL_SIZE = 8'd16; 
         wire up, down, left, right, rset;
           debounce upbutton(.clock(clk), .noisy(controls[1]),.clean(up));            
           debounce downbutton(.clock(clk), .noisy(controls[0]),.clean(down));   
           debounce leftbutton(.clock(clk), .noisy(controls[3]),.clean(left));   
           debounce rightbutton(.clock(clk), .noisy(controls[2]),.clean(right));  
           debounce centerbuttonn(.clock(clk), .noisy(reset),.clean(rset));  
     
     reg [3:0] special_state=0;
     localparam NONE = 4'd0;                             
     localparam FOOD = 4'd1;
     localparam SPECIAL1 = 4'd2;
     localparam SPECIAL2 = 4'd3; 
      
        reg lost_life=0; 
        //PACMAN!!!!      
        wire [11:0] pacman_pixel;  
        wire [10:0] pacman_x;
        wire [9:0] pacman_y;  
        reg [3:0]pacman_speed=2;  //will probably be changed by power ups game settings initalize to 4?  
        reg [7:0] pacman_size=8'd16;
        reg [11:0] pacman_colour =12'hF_F_0;
        reg [3:0]  pacman_aviable;
        wire [3:0]  pacman_dir;
        wire [3:0] pacman_controls = SW ? 4'b0 : (special_state_enmey==SPECIAL2) ? {right, left, down, up}: {left, right, up, down};
//        blob  yellow_blob(.x(pacman_x),.hcount(hcount),.y(pacman_y),.vcount(vcount),.
//            width(pacman_size),.height(pacman_size),.color(pacman_colour),.pixel(pacman_pixel), .clk(clk));
         pacman player(.clk(clk),.reset(rset),
                        .hcount(hcount),.vcount(vcount),
                         .hsync(hsync),.vsync(vsync),
                         .x(pacman_x), .y(pacman_y),
                         .direction(pacman_dir),
                         .dead(lost_life),.pixel(pacman_pixel)
                         );
         movement pacman_move(.clk(clk),.rset(rset_positions),.hold_position(hold_position),
                             .controls(pacman_controls),.aviable(pacman_aviable),
                             .x(pacman_x),.xstart(3<<4),
                             .y(pacman_y),.ystart(23<<4),
                             .speed(pacman_speed),.vsync(vsync), .vcount(vcount), .dir(pacman_dir)
                             );    
            
    //     wire [9:0] pacman_index1, pacman_index2, pacman_index3, pacman_index4;
    //           get_indicies pacman_index( .x(pacman_x),
    //                .y(pacman_y),
    //                .width(pacman_size),
    //                .height(pacman_size),
    //                .index1(pacman_index1),
    //                .index2(pacman_index2),
    //                .index3(pacman_index3),
    //               .index4(pacman_index4)
    //                ); 
                
   //GHOSTS!!!!
        localparam [7:0] GHOST_SIZE = 8'd16;
        reg [3:0] ghost_speed = 4'b1;
        wire [10:0] greenghost_x;
        wire [9:0] greenghost_y;
        wire [11:0] greenghost_pixel;
        wire [3:0] greenghost_dir;
//        blob  green_blob(.x(greenghost_x),.hcount(hcount),.y(greenghost_y),.vcount(vcount),.
//                width(GHOST_SIZE),.height(GHOST_SIZE),.color(12'h0_F_0),.pixel(greenghost_pixel), .clk(clk));
      wire [3:0] green_controls =SW ? {left, right, up, down} : 4'b0;
      reg  [3:0] green_aviable;
      reg greenghost_dead;
      wire [11:0] greenghost_color = 12'h0F0;
        ghost green_ghost(.clk(clk),.reset(rset),
                   .hcount(hcount),.vcount(vcount),
                    .x(greenghost_x),.y(greenghost_y),
                    .direction(greenghost_dir),
                    .color(greenghost_color),.pixel(greenghost_pixel), .scared(special_state == SPECIAL1)
                    );
                    
      
        movement greenghost_move(.clk(clk),.rset(rset_positions | greeghost_dead ),.hold_position(hold_position),
                      .controls(green_controls),.aviable(green_aviable),
                      .x(greenghost_x),.xstart(9<<4),
                      .y(greenghost_y),.ystart(12<<4),
                      .speed(ghost_speed),.vsync(vsync), .vcount(vcount), 
                      .dir(greenghost_dir)
                       );
                      
         reg [11:0] wall_pixel, ghostgate;
         wire [11:0] food_pixel; 
         //wire [11:0] special1_pixel;
         //wire [11:0] special2_pixel;  
         wire [11:0] ghosts_pixel=greenghost_pixel;
         wire [11:0] eddible_pixel = food_pixel; //special1_pixel|food_pixel|special2_pixel;
         //or all pixel outputs with total pixel
         //wire [11:0] total_pixel;
         assign total_pixel=(|ghosts_pixel) ? pacman_pixel|wall_pixel|ghosts_pixel :pacman_pixel|wall_pixel|eddible_pixel|ghostgate; 
        

//GAME info goes here
     reg [10:0] score; //how big can the score go?
     reg [3:0] food_eaten;
     
     
     
     wire [19:0] walls [29:0];
     assign walls[0]= 20'b01111111111111111111;
     assign walls[1]= 20'b01000000000000000001;
     assign walls[2]= 20'b01011011111111101101;
     assign walls[3]= 20'b01011011111111101101;
     assign walls[4]= 20'b01000000000000000001;
     assign walls[5]= 20'b01111011111111101111;
     assign walls[6]= 20'b01111011111111101111;
     assign walls[7]= 20'b01000000011100000001;
     assign walls[8]= 20'b01011111011101111101;
     assign walls[9]= 20'b01010000000000000101;
     assign walls[10]=20'b01010111110111110101;
     assign walls[11]=20'b01010100000000010101;
     assign walls[12]=20'b01000100000000010001;
     assign walls[13]=20'b01010100000000010101;
     assign walls[14]=20'b01010100000000010101;
     assign walls[15]=20'b01010111111111110101;
     assign walls[16]=20'b01000000000000000001;
     assign walls[17]=20'b01011110101101111101;
     assign walls[18]=20'b01000000101100000001;
     assign walls[19]=20'b01011110101101111101;
     assign walls[20]=20'b01011110000001111101;
     assign walls[21]=20'b01011110111101111101;
     assign walls[22]=20'b01011110111101111101;
     assign walls[23]=20'b01000000111100000001;
     assign walls[24]=20'b01110101111111010111;
     assign walls[25]=20'b01110101111111010111;
     assign walls[26]=20'b01000000000000000001;
     assign walls[27]=20'b01011101110111011101;
     assign walls[28]=20'b01000000000000000001;
     assign walls[29]=20'b01111111111111111111;
     
     reg [79:0] food [29:0];
     
      
     wire [6:0] x = hcount >> 4; ///hcount/16;
     wire [6:0] y = vcount >> 4;//(vcount)/16;
     
     reg [3:0] food_incell;// = {food[y][{hcount[10:4],2'd3}], food[y][{hcount[10:4],2'd2}], food[y][{hcount[10:4],2'd1}], food[y][{hcount[10:4],2'd0}]};
    
     reg [4:0] size;
     reg [11:0] colour;
     display_food food_display(.food(food_incell),
                                .pixel(food_pixel),
         .hcount(hcount), .vcount(vcount), .clk(clk), .size(size), .color(colour));
    
    
     wire dead = (lives==0);
   
     wire collison_green;
 
     collision greenghost(.x_1(pacman_x-2),.y_1(pacman_y-2),
                     .w_1(8),.h_1(8),
                     .x_2(greenghost_x-2),.y_2(greenghost_y-2),
                     .w_2(8),.h_2(8),
                     .collision(collison_green)
                        );
    
     localparam [3:0] UP = 4'b0010;
     localparam [3:0] DOWN = 4'b0001;
     localparam [3:0] LEFT = 4'b1000;
     localparam [3:0] RIGHT = 4'b0100;
     
     reg [3:0] timer_value;
     reg start_timer;
     reg timer_done_prev;
     wire timer_done;
     timer timer1(.value(timer_value), .clk(clk), .start_timer(start_timer),
                     .timer_done(timer_done), .rset(rset));
                     
      reg [3:0] special_timer_value=5;
      reg special_start_timer;
      //reg timer_done_prev;
      wire special_timer_done;
      timer specials_timer(.value(special_timer_value), .clk(clk), .start_timer(special_start_timer),
                                          .timer_done(special_timer_done), .rset(rset));
      reg [3:0] state = 0;
      assign state_display = state;
      localparam GAMESTART = 4'd0;
      localparam GAMEPLAY = 4'd1;
      localparam TIMER = 4'd2;
      localparam GAMEWON = 4'd3;
      localparam GAMELOST = 4'd4;
      
      
      
      wire food_aviable = food[0] || food[1] || food[2] || food[3] || food[4] ||
                          food[5] || food[6] || food[7] || food[8] || food[9] || 
                          food[10] || food[11] || food[12] || food[13] || food[14] || 
                          food[15] || food[16] || food[17] || food[18] || food[19] || 
                          food[20] || food[21] || food[22] || food[23] || food[24] || 
                          food[25] || food[26] || food[27] || food[28] || food[29];
      reg hold = 0;
      reg food_rset = 0;
      reg char_rset = 0;
      always @(posedge clk)begin
         wall_pixel<=( (hcount < 11'd320) && (vcount < 10'd480) && (walls[y][x]==1) ) ? 
                                            (state == GAMEWON) ? 12'h 3_F_0 : (state == GAMELOST) ? 12'hF_0_0 : 12'h 0_7_F 
                                            : 12'd0;
         ghostgate<= (x==9 && y==10) ? 12'h00F : 12'h000;
         vsync_prev<=vsync;
         
         food_incell <= {food[y][{hcount[10:4],2'd3}], food[y][{hcount[10:4],2'd2}], food[y][{hcount[10:4],2'd1}], food[y][{hcount[10:4],2'd0}]};
         size <= (food_incell == 1) ? 4 : 8; 
         colour <= (food_incell == 1) ? 12'hCFF :
                   (food_incell == 2) ? 12'h099
                  : (food_incell == 3) ? 12'hF00 :  12'h0F0;
 //        controls_prev<=(|controls) ? controls : controls_prev;
         
         green_aviable[0]<= ~(walls[(greenghost_y+ghost_speed+GHOST_SIZE-1)>>4][(greenghost_x)>>4] 
                             || walls[(greenghost_y+ghost_speed+GHOST_SIZE-1)>>4][(greenghost_x+GHOST_SIZE-1)>>4]);
         green_aviable[1]<= ~(walls[(greenghost_y-ghost_speed)>>4][(greenghost_x)>>4] 
                             || walls[(greenghost_y-ghost_speed)>>4][(greenghost_x+GHOST_SIZE-1)>>4]);
         green_aviable[2]<= ~(walls[(greenghost_y)>>4][(greenghost_x+GHOST_SIZE-1+ghost_speed)>>4] 
                             || walls[(greenghost_y+GHOST_SIZE-1)>>4][(greenghost_x+GHOST_SIZE-1+ghost_speed)>>4]);
         green_aviable[3]<= ~(walls[(greenghost_y)>>4][(greenghost_x-ghost_speed)>>4] 
                             || walls[(greenghost_y+GHOST_SIZE-1)>>4][(greenghost_x-ghost_speed)>>4]);
                             
         pacman_aviable[0]<= ~((walls[(pacman_y+pacman_speed+pacman_size-1)>>4][(pacman_x)>>4]
                                 || walls[(pacman_y+pacman_speed+pacman_size-1)>>4][(pacman_x+pacman_size-1)>>4])
                                 || (((((pacman_x>>4)==9) && (((pacman_y+pacman_speed+pacman_size-1)>>4)==10)
                                 ||((((pacman_x+pacman_size-1)>>4)==9) && (((pacman_y+pacman_speed+pacman_size-1)>>4)==10))))));
         pacman_aviable[1]<= ~(walls[(pacman_y-pacman_speed)>>4][(pacman_x)>>4] 
                              || walls[(pacman_y-pacman_speed)>>4][(pacman_x+pacman_size-1)>>4]);
         pacman_aviable[2]<= ~(walls[(pacman_y)>>4][(pacman_x+pacman_size-1+pacman_speed)>>4] 
                             || walls[(pacman_y+pacman_size-1)>>4][(pacman_x+pacman_size-1+pacman_speed)>>4]);
         pacman_aviable[3]<= ~(walls[(pacman_y)>>4][(pacman_x-pacman_speed)>>4] 
                             || walls[(pacman_y+pacman_size-1)>>4][(pacman_x-pacman_speed)>>4]);
         
         if(food_rset) begin
             food[0]<= 79'h00000000000000000000;
             food[1]<= 79'h00111111111111111000;
             food[2]<= 79'h00000000000000000000;
             food[3]<= 79'h00000000000000000000;
             food[4]<= 79'h00000000000000000300;
             food[5]<= 79'h00000000000000000000;
             food[6]<= 79'h00000000000000000000;
             food[7]<= 79'h00020000000000000000;
             food[8]<= 79'h00000000000000000000;
             food[9]<= 79'h00001111111111111000;
             food[10]<=79'h00000000000000000000;
             food[11]<=79'h00000000000000000000;
             food[12]<=79'h00000000000000000000;
             food[13]<=79'h00000000000000000000;
             food[14]<=79'h00000000000000000000;
             food[15]<=79'h00000000000000000000;
             food[16]<=79'h00111111111111000000;
             food[17]<=79'h00000000000000000000;
             food[18]<=79'h00000000000000000000;
             food[19]<=79'h00000000000000000000;
             food[20]<=79'h00000000000000000000;
             food[21]<=79'h00000000000000000000;
             food[22]<=79'h00000000000000000000;
             food[23]<=79'h00000000000000000000;
             food[24]<=79'h00000000000000000000;
             food[25]<=79'h00000000000000000000;
             food[26]<=79'h00000000000000000000;
             food[27]<=79'h00000000000000000000;
             food[28]<=79'h00020000000000003000;
             food[29]<=79'h00000000000000000000; 
             
          end
          
          if(rset) begin   
             lives<=3;
             score<=0;
             start_timer<=0;
             lost_life<=0;
             timer_value<=2;
             pacman_colour <=12'hF_F_0; 
             state<=GAMESTART;
             special_state=NONE;
         end
         else if(~vsync&& vsync_prev&& vcount<490)begin
             score<= score+food_eaten;
             //score<=(special1_eaten) ? score+2: score;
             food_eaten<=0;
             //special1_eaten<=0;
             //special2_eaten<=0;
             special_start_timer<=0;                
         end    
         
               
         case(state)
            GAMESTART: begin
                start_timer<=0;
                timer_value<=2;
                lives<=3;
                food_rset<=1;
                score<=0;
                lost_life<=0;
                hold<=1;
                char_rset = 1;
                special_state=NONE;
                if(start) begin
                    hold<=0;
                    char_rset = 0;
                    start_timer<=0;
                    state<=GAMEPLAY;
                    greenghost_dead<=0;
                end
            end
            GAMEPLAY: begin
                start_timer<=0;
                char_rset = 0;
                food_rset<=0;
                hold<=0;
                lost_life<=0;
                special_start_timer<=0;
                if ((|pacman_pixel) && (|food_pixel))begin
                 {food[y][(x<<2)+3], food[y][(x<<2)+2], food[y][(x<<2)+1], food[y][(x<<2)]}<= 4'b0;
                 food_eaten<=food_incell;
                 //special_state<=FOOD;
                 special_start_timer<= (food_incell>1) ? 1: 0;
                 special_state<=(food_incell>1) ? food_incell : special_state;
                end
                if(special_timer_done) begin
                         special_state<=NONE;
                         greenghost_dead<=0;
                  end  
//                if ((|pacman_pixel) && (|special1_pixel))begin
//                   special1[y][x]<=0;
//                   special1_eaten<=1;
//                   special_state<=SPECIAL1;
//                   special_start_timer<=1;
//                end
//                 if ((|pacman_pixel) && (|special2_pixel))begin
//                      special2[y][x]<=0;
//                      special2_eaten<=1;
//                      special_state<=SPECIAL2;
//                      special_start_timer<=1;
//                   end
                if(collison_green)begin
                   if(special_state == SPECIAL1)begin
                        score<=score+5;
                        greenghost_dead<=1;
                   end
                   else begin
                     lives<=lives-1;
                     lost_life<=1;
                     timer_value<=2;
                     start_timer<=1;
                     state<= (lives > 1) ? TIMER : GAMELOST;
                     special_state<=NONE;   
                   end
                end 
                if (~food_aviable) state<=GAMEWON;
            end
            TIMER:begin
                hold<=1;
                char_rset<=0;
                if(timer_done) begin
                    char_rset<=1;
                end
                state<=(char_rset) ? GAMEPLAY : TIMER;
            end
            GAMELOST: hold<=1;
            GAMEWON: hold<=1;
         endcase   
         if (opponent_won) state<=GAMELOST;
         if (opponent_lost) state<=GAMEWON;
         
          
 
   end
   
    
    assign rset_positions = rset |char_rset ;
    assign hold_position = dead | hold;
    assign player_lost = dead;
    assign player_won = ~food_aviable;
    
endmodule
